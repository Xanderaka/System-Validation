sort AlarmStatus = struct Critical | Maintenance | IsReset;
     IndicatorCoolingSystem = struct Green | Red;
	 IndicatorBrokenCoolingUnit = struct ColorGray | ColorOrange;
	 IndicatorBrokenTemperatureSensor = struct GrayColor | OrangeColor;
     CoolingUnitStatus = struct Stopped | Running | NoneBroken | OneBroken | AllBroken;
     TemperatureSensorStatus = struct HasStopped | IsRunning | NoneAreBroken | OneIsBroken | AllAreBroken;
     CoolingSystem = struct On | Off | InErrorState;
	 TemperatureStatus = struct Above | Below | OnTemperature;
	 CoolingStatus = struct CoolingDown | WarmingUp | Maintain;

      
act SoundAlarm, ResetAlarm: AlarmStatus;
	IndicateCoolingSystem: IndicatorCoolingSystem;
	IndicateBrokenCoolingUnit: IndicatorBrokenCoolingUnit;
	IndicateBrokenTemperatureSensor: IndicatorBrokenTemperatureSensor; 
	ReceiveStatusCoolingUnit, SendStatusCoolingUnit: CoolingUnitStatus;
	ReceiveStatusTemperatureSensor, SendStatusTemperatureSensor: TemperatureSensorStatus;
	ReceiveInput, StartPressed, StopPressed, ResetPressed, ButtonUp, ButtonDown, ResetCoolingUnit, StartCoolingUnit, StopCoolingUnit, StartTemperatureSensor, StopTemperatureSensor, IsOnTemperature, SetTemperature;
	ReceiveTemperature: TemperatureStatus;
	TurnCoolingSystem: CoolingSystem;
	

proc System(systemStatus:CoolingSystem) = 
	 	(StartPressed.(systemStatus==Off) -> (TurnCoolingSystem(On).System(systemStatus=On)). %if start is pressed
		((systemStatus==InErrorState) -> (ErrorHandling(status1=Stopped, status2=HasStopped, ErrorStatus=false, MaintenanceStatus=false)) <> %check if system is in error state, if so go to error handling
		(SetTemperature.RegulateTemperature(status=OnTemperature, cooling=Maintain)))) %if system is not in error state go to regulate temperature
	 	+ 
	 	(StopPressed.(systemStatus==On) -> TurnCoolingSystem(Off).System(systemStatus=Off)) %if stop is pressed
	 	+
	 	(ResetPressed.(systemStatus==InErrorState) -> System(systemStatus=On)); %if reset is pressed
		

	 RegulateTemperature(status: TemperatureStatus, cooling: CoolingStatus, sensor: TemperatureSensorStatus, unit: CoolingUnitStatus) = 
		(ReceiveStatusTemperatureSensor(sensor).ReceiveStatusCoolingUnit(unit).CheckComponents(temperatureSensor=sensor, coolingUnit=unit) )
		+
		((sensor==NoneAreBroken && unit==NoneBroken) ->
		( ((status==Above && (cooling==WarmingUp || cooling==Maintain)) -> StartCoolingUnit.RegulateTemperature(status=Above, cooling=CoolingDown, sensor=IsRunning, unit=Running))
		+
		((status==Below && (cooling==CoolingDown || cooling==Maintain)) -> StopCoolingUnit.RegulateTemperature(status=Below, cooling=WarmingUp, sensor=IsRunning, unit=Stopped))
		+
		((cooling==CoolingDown) -> IsOnTemperature.RegulateTemperature(status=OnTemperature, cooling=Maintain, sensor=IsRunning, unit=Stopped))
		+
		((cooling==WarmingUp) -> IsOnTemperature.RegulateTemperature(status=OnTemperature, cooling=Maintain, sensor=IsRunning, unit=Stopped)) ))

		+ 
		(StopPressed.TurnCoolingSystem(Off).System(systemStatus=Off)); %turn system off when stop is pressed


	 CheckComponents(temperatureSensor: TemperatureSensorStatus, coolingUnit: CoolingUnitStatus)=
		( (temperatureSensor==NoneAreBroken && coolingUnit==NoneBroken) -> (SendStatusTemperatureSensor(NoneAreBroken).SendStatusCoolingUnit(NoneBroken).RegulateTemperature()) <> %if none of the components are broken
		( (temperatureSensor==OneIsBroken || coolingUnit==OneBroken) -> (SendStatusTemperatureSensor(OneIsBroken).SendStatusCoolingUnit(OneBroken).RegulateTemperature()) <>  %if one of the components is broken
		( (temperatureSensor==AllAreBroken || coolingUnit==AllBroken) -> SendStatusTemperatureSensor(OneIsBroken).SendStatusCoolingUnit(OneBroken).RegulateTemperature() ) ) ) %if all the components are broken
		+ 
		(StopPressed.TurnCoolingSystem(Off).System(systemStatus=Off)); %turn system off when stop is pressed
	
	 ErrorHandling(status1:CoolingUnitStatus, status2:TemperatureSensorStatus, ErrorStatus:Bool, MaintenanceStatus:Bool) = 
		(ErrorStatus) -> ResetPressed.SoundAlarm(IsReset).
		 ErrorHandling(status1=NoneBroken, 			
		 status2=NoneAreBroken, ErrorStatus = false) <>
		(MaintenanceStatus) -> ResetPressed.SoundAlarm(IsReset).
		 IndicateBrokenTemperatureSensor(GrayColor).
		 IndicateBrokenCoolingUnit(ColorGray).
		 ErrorHandling(status1=NoneBroken, 			
		 status2=NoneAreBroken, MaintenanceStatus = false) <>
		(!ErrorStatus) -> ((status1 == AllBroken || status2 == AllAreBroken) -> 
		SoundAlarm(Critical).ErrorHandling(ErrorStatus=true) <> (!MaintenanceStatus) -> 
		((status1 == OneBroken && status2 == OneIsBroken)-> 
		IndicateBrokenCoolingUnit(ColorOrange).
		IndicateBrokenTemperatureSensor(OrangeColor)
		.SoundAlarm(Maintenance) <> 
		((status1 == OneBroken || status2 == OneIsBroken)
		-> (status1 == OneBroken) -> 
		(IndicateBrokenCoolingUnit(ColorOrange).
		SoundAlarm(Maintenance).StartCoolingUnit) +
		(status2 == OneIsBroken) -> IndicateBrokenTemperatureSensor(OrangeColor) 		
		.SoundAlarm(Maintenance).StartTemperatureSensor)).
		ErrorHandling(MaintenanceStatus=true) + 
		(status1 == NoneBroken && status2 == 
		NoneAreBroken)-> ButtonUp)
		+
		(StopPressed.TurnCoolingSystem(Off).System(systemStatus=Off)); %turn system off when stop is pressed;


init System(Off) || RegulateTemperature(OnTemperature, Maintain, HasStopped, Stopped) || CheckComponents(HasStopped, Stopped) || ErrorHandling(OneBroken, AllAreBroken, false, false);