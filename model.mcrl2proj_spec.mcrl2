sort AlarmStatus = struct Critical | Functional;
     IndicatorCoolingSystem = struct Green | Red;
	 IndicatorBrokenCoolingUnit = struct ColorGray | ColorOrange;
	 IndicatorBrokenTemperatureSensor = struct GrayColor | OrangeColor;
     CoolingUnitStatus = struct Stopped | Running;
	 CoolingUnitComponentStatus = struct NoneBroken | SomeBroken | AllBroken;
     TemperatureSensorStatus = struct HasStopped | IsRunning;
	 TemperatureSensorComponentStatus = struct NoneAreBroken | SomeAreBroken | AllAreBroken;
     CoolingSystem = struct On | Off;
	 TemperatureStatus = struct Above | EqualOrBelow;
	 ButtonType = struct Start | Stop | Reset | Up | Down;
     CoolingUnitWorking = Bool;
	 TemperatureSensorWorking = Bool;
	 NumberOfCoolingUnits = struct one | two |three;
 
map AmountCoolingUnitsWorking: Nat;

eqn AmountCoolingUnitsWorking = 0;

act SoundAlarm, ResetAlarm: AlarmStatus;
	IndicateCoolingSystem: IndicatorCoolingSystem;
	IndicateBrokenCoolingUnit: IndicatorBrokenCoolingUnit;
	IndicateBrokenTemperatureSensor: IndicatorBrokenTemperatureSensor; 
	ReceiveStatusCoolingUnit, SendStatusCoolingUnit: CoolingUnitStatus;
	ReceiveButton: ButtonType;
	ReceiveStatusTemperatureSensor, SendStatusTemperatureSensor: TemperatureSensorStatus;
	StartCoolingUnit, StopCoolingUnit, CheckTemperatureLevels, RequestCoolingUnitStatus, RequestTemperatureSensorStatus, GoCritical;
	ReceiveTemperature: TemperatureStatus;
	TurnCoolingSystem: CoolingSystem;
	

proc System(systemStatus:CoolingSystem, alarm:AlarmStatus) = 
	 	(systemStatus==Off) -> (ReceiveButton(Start).TurnCoolingSystem(On).IndicateCoolingSystem(Green).System(systemStatus=On)+ReceiveButton(Stop).System(Off,Functional)) <> %if start is pressed
	 	((systemStatus==On) -> ((alarm==Critical)-> ((TurnCoolingSystem(Off).IndicateCoolingSystem(Red).System(systemStatus=Off))+(ReceiveButton(Reset).System(alarm=Functional)))) + (alarm!=Critical) -> (RequestCoolingUnitStatus.(CheckCoolingUnitStatus(NoneBroken)+CheckCoolingUnitStatus(SomeBroken)+CheckCoolingUnitStatus(AllBroken))+ ReceiveButton(Stop).TurnCoolingSystem(Off).IndicateCoolingSystem(Red).System(systemStatus=Off))); %if stop is pressed

	 CheckCoolingUnitStatus(coolingUnit: CoolingUnitComponentStatus, working: CoolingUnitWorking)=
%		(coolingUnit==NoneBroken) -> (RequestTemperatureSensorStatus.(CheckTemperatureSensor(NoneAreBroken) + CheckTemperatureSensor(SomeAreBroken) + CheckTemperatureSensor(AllAreBroken))) +
%		(coolingUnit==SomeBroken) -> (IndicateBrokenCoolingUnit(ColorOrange).(RequestTemperatureSensorStatus.(CheckTemperatureSensor(NoneAreBroken) + CheckTemperatureSensor(SomeAreBroken) + CheckTemperatureSensor(AllAreBroken)))) +
%		(coolingUnit==AllBroken) -> (GoCritical.System(On,Critical)) +
		sum number:NumberOfCoolingUnits.
			(number == one) -> (working == true) -> succ(AmountCoolingUnitsWorking) +
			(number == two) -> (working == true) -> succ(AmountCoolingUnitsWorking) +
			(number == three) -> (working == true) -> succ(AmountCoolingUnitsWorking);
	%	(AmountCoolingUnitsWorking==0) -> 

	CheckTemperatureSensor(temperatureSensor: TemperatureSensorComponentStatus)=
		(temperatureSensor==NoneAreBroken) -> (CheckTemperatureLevels.(RegulateTemperature(Above)+RegulateTemperature(EqualOrBelow)))+
		(temperatureSensor==SomeAreBroken) -> (IndicateBrokenTemperatureSensor(OrangeColor).CheckTemperatureLevels.(RegulateTemperature(Above)+RegulateTemperature(EqualOrBelow))) +
		(temperatureSensor==AllAreBroken) -> (GoCritical.System(On,Critical));

	RegulateTemperature(status: TemperatureStatus)=
		(status==Above) -> ((ReceiveButton(Down).StartCoolingUnit+StartCoolingUnit).System(On,Functional) + ReceiveButton(Up).(RegulateTemperature(EqualOrBelow) + RegulateTemperature(Above))) +
		(status==EqualOrBelow) -> ((ReceiveButton(Up).StopCoolingUnit+StopCoolingUnit).(RequestTemperatureSensorStatus.(CheckTemperatureSensor(NoneAreBroken) + CheckTemperatureSensor(SomeAreBroken) + CheckTemperatureSensor(AllAreBroken))) + (ReceiveButton(Down).(RegulateTemperature(EqualOrBelow)+RegulateTemperature(Above))));

init System(Off, Functional); 