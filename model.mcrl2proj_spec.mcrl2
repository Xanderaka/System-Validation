sort AlarmStatus = struct Critical | Functional;
     IndicatorCoolingSystem = struct Green | Red;
	 IndicatorBrokenCoolingUnit = struct ColorGray | ColorOrange;
	 IndicatorBrokenTemperatureSensor = struct GrayColor | OrangeColor;
     CoolingUnitStatus = struct Stopped | Running;
	 CoolingUnitComponentStatus = struct NoneBroken | SomeBroken | AllBroken;
     TemperatureSensorStatus = struct HasStopped | IsRunning;
	 TemperatureSensorComponentStatus = struct NoneAreBroken | SomeAreBroken | AllAreBroken;
     CoolingSystem = struct On | Off;
	 TemperatureStatus = struct Above | EqualOrBelow;
	 ButtonType = struct Start | Stop | Reset | Up | Down;
	 TemperatureSensorWorking = Bool;
	 NumberOfCoolingUnits = struct one | two | three;	

map plus: Nat -> Pos;
var x:Nat;
eqn plus(x) = succ(x);

act SoundAlarm, ResetAlarm: AlarmStatus;
	IndicateCoolingSystem: IndicatorCoolingSystem;
	IndicateBrokenCoolingUnit: IndicatorBrokenCoolingUnit;
	IndicateBrokenTemperatureSensor: IndicatorBrokenTemperatureSensor; 
	ReceiveStatusCoolingUnit, SendStatusCoolingUnit: CoolingUnitStatus;
	ReceiveButton: ButtonType;
	ReceiveStatusTemperatureSensor, SendStatusTemperatureSensor: TemperatureSensorStatus;
	StartCoolingUnit, StopCoolingUnit, CheckTemperatureLevels, RequestCoolingUnitStatus, RequestTemperatureSensorStatus, GoCritical, PickOtherCoolingUnit, WorkingComponent, BrokenComponent,checkComponent;
	ReceiveTemperature: TemperatureStatus;
	TurnCoolingSystem: CoolingSystem;

proc System(systemStatus:CoolingSystem, alarm:AlarmStatus) = 
	 	(systemStatus==Off) -> (ReceiveButton(Start).TurnCoolingSystem(On).IndicateCoolingSystem(Green).System(systemStatus=On)+ReceiveButton(Stop).System(Off,Functional)) <> %if start is pressed
	 	((systemStatus==On) -> ((alarm==Critical)-> ((TurnCoolingSystem(Off).IndicateCoolingSystem(Red).System(systemStatus=Off))+(ReceiveButton(Reset).System(alarm=Functional)))) + (alarm!=Critical) -> (RequestCoolingUnitStatus.(CheckCoolingUnitStatus(true,true,true,0,0))+ ReceiveButton(Stop).TurnCoolingSystem(Off).IndicateCoolingSystem(Red).System(systemStatus=Off))); %if stop is pressed

	 CheckCoolingUnitStatus(working1:Bool,working2:Bool,working3:Bool, check:Nat, total:Nat)=
%		(coolingUnit==NoneBroken) -> (RequestTemperatureSensorStatus.(CheckTemperatureSensor(NoneAreBroken) + CheckTemperatureSensor(SomeAreBroken) + CheckTemperatureSensor(AllAreBroken))) +
%		(coolingUnit==SomeBroken) -> (IndicateBrokenCoolingUnit(ColorOrange).(RequestTemperatureSensorStatus.(CheckTemperatureSensor(NoneAreBroken) + CheckTemperatureSensor(SomeAreBroken) + CheckTemperatureSensor(AllAreBroken)))) +
%		(coolingUnit==AllBroken) -> (GoCritical.System(On,Critical))
		(total != 3)->(sum amount:NumberOfCoolingUnits.
			(working1 == true) -> (WorkingComponent.CheckCoolingUnitStatus(working1 = false, check = plus(check),total = plus(total)))<> BrokenComponent+
			(working2 == true) -> WorkingComponent.CheckCoolingUnitStatus(working2 = false, check = plus(check),total = plus(total)) +
			(working3 == true) -> WorkingComponent.CheckCoolingUnitStatus(working3 = false, check = plus(check),total = plus(total))) <>
		((check == 0)->(GoCritical.System(On,Critical)) + 
		(check==3)->(RequestTemperatureSensorStatus.(CheckTemperatureSensor(NoneAreBroken))) + (check==1 || check == 2)->(IndicateBrokenCoolingUnit(ColorOrange).(RequestTemperatureSensorStatus.(CheckTemperatureSensor(NoneAreBroken) + CheckTemperatureSensor(SomeAreBroken) + CheckTemperatureSensor(AllAreBroken)))));


	CheckTemperatureSensor(temperatureSensor: TemperatureSensorComponentStatus)=
		(temperatureSensor==NoneAreBroken) -> (CheckTemperatureLevels.(RegulateTemperature(Above)+RegulateTemperature(EqualOrBelow)))+
		(temperatureSensor==SomeAreBroken) -> (IndicateBrokenTemperatureSensor(OrangeColor).CheckTemperatureLevels.(RegulateTemperature(Above)+RegulateTemperature(EqualOrBelow))) +
		(temperatureSensor==AllAreBroken) -> (GoCritical.System(On,Critical));

	RegulateTemperature(status: TemperatureStatus)=
		(status==Above) -> ((ReceiveButton(Down).StartCoolingUnit+StartCoolingUnit).System(On,Functional) + ReceiveButton(Up).(RegulateTemperature(EqualOrBelow) + RegulateTemperature(Above))) +
		(status==EqualOrBelow) -> ((ReceiveButton(Up).StopCoolingUnit+StopCoolingUnit).(RequestTemperatureSensorStatus.(CheckTemperatureSensor(NoneAreBroken) + CheckTemperatureSensor(SomeAreBroken) + CheckTemperatureSensor(AllAreBroken))) + (ReceiveButton(Down).(RegulateTemperature(EqualOrBelow)+RegulateTemperature(Above))));

init System(Off, Functional); 