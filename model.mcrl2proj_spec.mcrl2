sort AlarmStatus = struct Critical | Functional;
     IndicatorCoolingSystem = struct Green | Red;
	 IndicatorBrokenCoolingUnit = struct ColorGray | ColorOrange;
	 IndicatorBrokenTemperatureSensor = struct GrayColor | OrangeColor;
	 CoolingUnitComponentStatus = struct NoneBroken | SomeBroken | AllBroken;
	 TemperatureSensorComponentStatus = struct NoneAreBroken | SomeAreBroken | AllAreBroken;
     CoolingSystem = struct On | Off;
	 TemperatureStatus = struct Above | EqualOrBelow;
	 ButtonType = struct Start | Stop | Reset | Up | Down;

glob error:Bool;

act SoundAlarm: AlarmStatus;
	IndicateCoolingSystem,CoolingIndicate1,CoolingIndicate2,CoolingIndicate3: IndicatorCoolingSystem;
	IndicateBrokenCoolingUnit: IndicatorBrokenCoolingUnit;
	IndicateBrokenTemperatureSensor: IndicatorBrokenTemperatureSensor; 
	Button1, Button2, Button3, ButtonStatus, TempButton: ButtonType;
	StartCoolingUnit, StopCoolingUnit, SwitchToFunctionalComponent;
	ReceiveTemperature: TemperatureStatus;
	TurnCoolingSystem, SendCoolingAction1, SendCoolingAction2, SendCoolingAction3: CoolingSystem;
	RequestCoolingUnitStatus: CoolingUnitComponentStatus;
	RequestTemperatureSensorStatus: TemperatureSensorComponentStatus;
	SendCoolingSystemStatus, ReceiveCoolingSystemStatus, CoolingSystemStatus: CoolingSystem;
	SendAlarmStatus, ReceiveAlarmStatus, StatusAlarm: AlarmStatus;
	CheckTemperatureLevels: TemperatureStatus;
	

proc System1(systemStatus:CoolingSystem, alarm:Bool) = 
	 	(systemStatus==Off) -> (Button1(Start).SendCoolingAction1(On).CoolingIndicate1(Green).System1(systemStatus=On)+Button1(Stop).SendCoolingAction1(Off).System1(systemStatus=Off)) <> %if start is pressed
	 	((systemStatus==On) -> (!alarm)->RequestCoolingUnitStatus(NoneBroken).CheckCoolingUnitStatus(NoneBroken)+RequestCoolingUnitStatus(SomeBroken).CheckCoolingUnitStatus(SomeBroken)+RequestCoolingUnitStatus(AllBroken).CheckCoolingUnitStatus(AllBroken)); %if stop is pressed

	 System2(systemStatus:CoolingSystem, alarm:Bool) = 
	 	(systemStatus==Off) -> (Button2(Start).SendCoolingAction2(On).CoolingIndicate2(Green).System2(systemStatus=On)+Button2(Stop).SendCoolingAction2(Off).System2(systemStatus=Off)) <> %if start is pressed
	 	((systemStatus==On) -> (!alarm)->(RequestTemperatureSensorStatus(NoneAreBroken).CheckTemperatureSensorStatus(NoneAreBroken)+RequestTemperatureSensorStatus(SomeAreBroken).CheckTemperatureSensorStatus(SomeAreBroken)+RequestTemperatureSensorStatus(AllAreBroken).CheckTemperatureSensorStatus(AllAreBroken))); %if stop is pressed

	 System3(systemStatus:CoolingSystem, alarm:Bool) = 
	 	(systemStatus==Off) -> (Button3(Start).SendCoolingAction3(On).CoolingIndicate3(Green).System3(systemStatus=On)+Button3(Stop).SendCoolingAction3(Off).System3(systemStatus=Off)) <> %if start is pressed
	 	((systemStatus==On) -> (!alarm)->(CheckTemperatureLevels(Above).RegulateTemperature(Above)+CheckTemperatureLevels(EqualOrBelow).RegulateTemperature(EqualOrBelow))); %if stop is pressed

	 CheckCoolingUnitStatus(coolingUnit: CoolingUnitComponentStatus)=
		(coolingUnit==NoneBroken) -> SendAlarmStatus(Functional).System1(On,false) +
		(coolingUnit==SomeBroken) -> (IndicateBrokenCoolingUnit(ColorOrange).SwitchToFunctionalComponent.SendAlarmStatus(Functional).System1(On,false)) +
		(coolingUnit==AllBroken) -> SoundAlarm(Critical).System1(On,true);

	CheckTemperatureSensorStatus(temperatureSensor: TemperatureSensorComponentStatus)=
		(temperatureSensor==NoneAreBroken) -> System2(On,false) + 
		(temperatureSensor==SomeAreBroken) -> (IndicateBrokenTemperatureSensor(OrangeColor).System2(On,false)) + 
		(temperatureSensor==AllAreBroken) -> SoundAlarm(Critical).System2(On,true);

	RegulateTemperature(status: TemperatureStatus)=
		(status==Above) -> ((TempButton(Down).StartCoolingUnit+StartCoolingUnit).SendAlarmStatus(Functional).System3(On,false) + TempButton(Up).SendAlarmStatus(Functional).(RegulateTemperature(EqualOrBelow) + RegulateTemperature(Above))) +
		(status==EqualOrBelow) -> ((TempButton(Up).StopCoolingUnit+StopCoolingUnit).SendAlarmStatus(Functional).System3(On,false));

init allow({TurnCoolingSystem,ButtonStatus,IndicateCoolingSystem,IndicateCoolingSystem,RequestTemperatureSensorStatus,
			RequestCoolingUnitStatus,CoolingSystemStatus,StatusAlarm,StartCoolingUnit,CheckTemperatureLevels,StopCoolingUnit,
			TempButton,SoundAlarm,SwitchToFunctionalComponent,IndicateBrokenCoolingUnit,IndicateBrokenTemperatureSensor},
	 comm ({Button1|Button2|Button3->ButtonStatus,
			SendCoolingAction1|SendCoolingAction3|SendCoolingAction2->TurnCoolingSystem,
	 	 	CoolingIndicate1|CoolingIndicate2|CoolingIndicate3->IndicateCoolingSystem,
			SendAlarmStatus|ReceiveAlarmStatus->StatusAlarm,
			SendCoolingSystemStatus|ReceiveCoolingSystemStatus->CoolingSystemStatus},System1(Off, false)||System2(Off,false)||System3(Off,false)));    