sort AlarmStatus = struct Critical | Functional;
     IndicatorCoolingSystem = struct Green | Red;
	 IndicatorBrokenCoolingUnit = struct ColorGray | ColorOrange;
	 IndicatorBrokenTemperatureSensor = struct GrayColor | OrangeColor;
     CoolingUnitStatus = struct Stopped | Running;
	 CoolingUnitComponentStatus = struct NoneBroken | SomeBroken | AllBroken;
     TemperatureSensorStatus = struct HasStopped | IsRunning;
	 TemperatureSensorComponentStatus = struct NoneAreBroken | SomeAreBroken | AllAreBroken;
     CoolingSystem = struct On | Off;
	 TemperatureStatus = struct Above | Below;
	 CoolingStatus = struct CoolingDown | WarmingUp;

      
act SoundAlarm, ResetAlarm: AlarmStatus;
	IndicateCoolingSystem: IndicatorCoolingSystem;
	IndicateBrokenCoolingUnit: IndicatorBrokenCoolingUnit;
	IndicateBrokenTemperatureSensor: IndicatorBrokenTemperatureSensor; 
	ReceiveStatusCoolingUnit, SendStatusCoolingUnit: CoolingUnitStatus;
	ReceiveStatusTemperatureSensor, SendStatusTemperatureSensor: TemperatureSensorStatus;
	StartPressed, StopPressed, ResetPressed, ButtonUp, ButtonDown, ResetCoolingUnit, StartCoolingUnit, StopCoolingUnit, StartTemperatureSensor, StopTemperatureSensor, IsOnTemperature, SetTemperature, RequestCoolingUnitStatus, RequestTemperatureSensorStatus, placeholder, GoCritical;
	ReceiveTemperature: TemperatureStatus;
	TurnCoolingSystem: CoolingSystem;
	

proc System(systemStatus:CoolingSystem, alarm:AlarmStatus) = 
	 	(systemStatus==Off) -> StartPressed.TurnCoolingSystem(On).IndicateCoolingSystem(Green).System(systemStatus=On) <> %if start is pressed
	 	((systemStatus==On) -> ((alarm==Critical)-> ((TurnCoolingSystem(Off).IndicateCoolingSystem(Red).System(systemStatus=Off))+(ResetPressed.System(alarm=Functional)))) + (alarm!=Critical) -> (RequestCoolingUnitStatus.(CheckCoolingUnitStatus(NoneBroken)+CheckCoolingUnitStatus(SomeBroken)+CheckCoolingUnitStatus(AllBroken))+ StopPressed.TurnCoolingSystem(Off).IndicateCoolingSystem(Red).System(systemStatus=Off))); %if stop is pressed
		


	 CheckCoolingUnitStatus(coolingUnit: CoolingUnitComponentStatus)=
		(coolingUnit==NoneBroken) -> (RequestTemperatureSensorStatus.CheckTemperatureSensor(NoneAreBroken) + RequestTemperatureSensorStatus.CheckTemperatureSensor(SomeAreBroken)) +
		(coolingUnit==SomeBroken) -> (IndicateBrokenCoolingUnit(ColorOrange).(RequestTemperatureSensorStatus.CheckTemperatureSensor(NoneAreBroken) + RequestTemperatureSensorStatus.CheckTemperatureSensor(SomeAreBroken) + RequestTemperatureSensorStatus.CheckTemperatureSensor(AllAreBroken))) +
		(coolingUnit==AllBroken) -> (GoCritical.System(On,Critical));
	
	CheckTemperatureSensor(temperatureSensor: TemperatureSensorComponentStatus)=
		(temperatureSensor==NoneAreBroken) -> (placeholder.System(On,Functional))+
		(temperatureSensor==SomeAreBroken) -> (IndicateBrokenTemperatureSensor(OrangeColor).System(On,Functional)) +
		(temperatureSensor==AllAreBroken) -> (GoCritical.System(On,Critical));

init System(Off, Critical); 