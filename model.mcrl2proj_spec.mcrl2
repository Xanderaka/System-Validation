sort IndicatorCoolingSystem = struct Green | Red;
	 IndicatorBrokenCoolingUnit = struct ColorGray | ColorOrange;
	 IndicatorBrokenTemperatureSensor = struct GrayColor | OrangeColor;
     CoolingSystem = struct On | Off | Error;
	 ButtonType = struct Start | Stop | Reset | Up | Down;
	 Temperature = Int;
	 ComponentStatus = struct SomeBroken | NoneBroken | AllBroken;

%Global values
map TempSens1,TempSens2,TempSens3:Temperature;
	noCoolingUnits: Nat;
	noTempSensor: Nat;
eqn TempSens1 = -20;
	TempSens2 = -25;
	TempSens3 = -10;
	noCoolingUnits = 2;
	noTempSensor = 3;

%Equation to add elements to a list
map push: Nat # List(Nat) -> List(Nat);
var x: Nat;
	l: List(Nat);
eqn push(x,l) = x |> l;

%Equation to calculate the mean of 3 values
map mean:Temperature#Temperature#Temperature->Temperature;
var D,E,F:Temperature;
eqn mean(D,E,F) = round((D+E+F)/3);

%All the actions used in the model
act SoundAlarm: Bool;
	IndicateCoolingSystem: IndicatorCoolingSystem;
	IndicateBrokenCoolingUnit: IndicatorBrokenCoolingUnit;
	IndicateBrokenTemperatureSensor: IndicatorBrokenTemperatureSensor; 
	ButtonPressed: ButtonType;
	StartCoolingUnit, StopCoolingUnit,ResetCounter;
	TurnMainSystem: CoolingSystem;
	SendAlarmStatus, ReceiveAlarmStatus, Error: Bool;
	InCritical,ReceiveReset1,ReceiveReset2,SendReset,Reset,BusyWithTask;
	BrokenCool,NotBrokenCool,BrokenTemp,NotBrokenTemp,SwitchToFunctionalComponent:Nat;
	SendSystemStatus,ReceiveSystemStatus1,ReceiveSystemStatus2,ReceiveSystemStatus3,StatusSystem: CoolingSystem;
	ReceiveMeasuredTemperature, ReceiveSetTemperature: Temperature;
	StatusCoolingUnits, StatusTemperatureSensors: ComponentStatus;
	
%Process that handles the start, stop en reset button and sends the status of the main system to the other processes
proc System(systemStatus:CoolingSystem) = 
	 	(systemStatus==Off) -> SendSystemStatus(systemStatus).(ButtonPressed(Start).TurnMainSystem(On)
		.IndicateCoolingSystem(Green).System(systemStatus=On)
		+ButtonPressed(Stop).TurnMainSystem(Off).IndicateCoolingSystem(Red).System(systemStatus=Off)) 
		<>(sum error:Bool . ReceiveAlarmStatus(error).(!error)->(SendSystemStatus(systemStatus).System()
		+ButtonPressed(Reset)
		.IndicateBrokenTemperatureSensor(GrayColor).IndicateBrokenCoolingUnit(ColorGray)
		.SendReset.SoundAlarm(false).System(systemStatus=On)
		+ButtonPressed(Stop).TurnMainSystem(Off).IndicateCoolingSystem(Red).System(systemStatus=Off))
		<>(SoundAlarm(true).(InCritical.System(systemStatus=Error)
		+SendSystemStatus(Error).System(systemStatus=Error) 
		+ButtonPressed(Reset).SendReset.SoundAlarm(false).System(systemStatus=On)))); %if stop is pressed
%Process that checks the status of all the cooling units and makes a decision based on the received info
	 CheckCoolingUnitStatus(check1:Bool,check2:Bool,noBroken:Nat,Total:Nat,BrokenComp:List(Nat),busy:Bool,error:Bool)=
		(!busy)->(SendAlarmStatus(error).CheckCoolingUnitStatus())
		+(!busy)->(ReceiveReset1.CheckCoolingUnitStatus(error=false)) 
		+(sum s:CoolingSystem . ((!busy)->(ReceiveSystemStatus1(s))<>((s==On)->BusyWithTask))
		.(s==On||busy)->(sum k:Nat . ((k<noCoolingUnits)->((k==0)->(!check1)
		->(NotBrokenCool(k).CheckCoolingUnitStatus(check1=true,Total=Total+1,busy=true)		
		+BrokenCool(k).CheckCoolingUnitStatus(check1=true,noBroken=noBroken+1,Total=Total+1
		,BrokenComp=push(k,BrokenComp),busy=true)) + (k==1)->(!check2)
		->(NotBrokenCool(k).CheckCoolingUnitStatus(check2=true,Total=Total+1,busy=true)
		+BrokenCool(k).CheckCoolingUnitStatus(check2=true,noBroken=noBroken+1,Total=Total+1
		,BrokenComp=push(k,BrokenComp),busy=true)))) + (Total==noCoolingUnits)->((noBroken==0)
		->StatusCoolingUnits(NoneBroken).CheckCoolingUnitStatus(false,false,0,0,[],false,false)
		+(noBroken==1)->StatusCoolingUnits(SomeBroken). sum j:Nat.(j<noCoolingUnits)->(!(j in BrokenComp))
		->SwitchToFunctionalComponent(j).IndicateBrokenCoolingUnit(ColorOrange).CheckCoolingUnitStatus(false,false,0,0,[],false,false)
		+(noBroken==2)->StatusCoolingUnits(AllBroken).SendAlarmStatus(true).CheckCoolingUnitStatus(false,false,0,0,[],false,true)))
		<>CheckCoolingUnitStatus());
%Process that checks the status of all the temperature sensor and makes a decision based on the received info
	CheckTemperatureSensorStatus(check1:Bool,check2:Bool,check3:Bool,noBroken:Nat,Total:Nat,BrokenComp:List(Nat),busy:Bool,error:Bool)=
		(!busy)->(SendAlarmStatus(error).CheckTemperatureSensorStatus()) + (!busy)->(ReceiveReset2 
		.CheckTemperatureSensorStatus(error=false)) + (sum s:CoolingSystem 
		.((!busy)->(ReceiveSystemStatus2(s))<>((s==On)->BusyWithTask)) 
		.(s==On||busy)->( sum k:Nat . ((k<noTempSensor)->((k==0)->(!check1)
		->(NotBrokenTemp(k).CheckTemperatureSensorStatus(check1=true,Total=Total+1,busy=true)		
		+BrokenTemp(k).CheckTemperatureSensorStatus(check1=true,noBroken=noBroken+1,Total=Total+1
		,BrokenComp=push(k,BrokenComp),busy=true)) + (k==1)->(!check2)
		->(NotBrokenTemp(k).CheckTemperatureSensorStatus(check2=true,Total=Total+1,busy=true)
		+BrokenTemp(k).CheckTemperatureSensorStatus(check2=true,noBroken=noBroken+1,Total=Total+1
		,BrokenComp=push(k,BrokenComp),busy=true))+(k==2)->(!check3)
		->(NotBrokenTemp(k).CheckTemperatureSensorStatus(check3=true,Total=Total+1,busy=true)
		+BrokenTemp(k).CheckTemperatureSensorStatus(check3=true,noBroken=noBroken+1,Total=Total+1
		,BrokenComp=push(k,BrokenComp),busy=true)))) + (Total==noTempSensor)->((noBroken==0)
		->StatusTemperatureSensors(NoneBroken).CheckTemperatureSensorStatus(false,false,false,0,0,[],false,false) 
		+(noBroken==1||noBroken==2)->StatusTemperatureSensors(SomeBroken).IndicateBrokenTemperatureSensor(OrangeColor)
		.CheckTemperatureSensorStatus(false,false,false,0,0,[],false,false)
		+(noBroken==3)->StatusTemperatureSensors(AllBroken).CheckTemperatureSensorStatus(false,false,false,0,0,[],false,true)))
		<>CheckTemperatureSensorStatus());
%Process that tries to keep the temperature inside the main system on the desired level
	RegulateTemperature(SetTemp: Temperature, MeasuredTemp: Temperature, busy:Nat) = 
	 	(busy<2)->(sum s:CoolingSystem . ((busy !=1)->(ReceiveSystemStatus3(s))<>((s==On)->BusyWithTask)) 
		.(s==On||busy==1)->(ReceiveSetTemperature(SetTemp).ReceiveMeasuredTemperature(MeasuredTemp)
		.((MeasuredTemp>SetTemp)->(StartCoolingUnit.RegulateTemperature(MeasuredTemp=MeasuredTemp,busy=0))
		<>(StopCoolingUnit.RegulateTemperature(MeasuredTemp=MeasuredTemp,busy=0))+(SetTemp<-1 && SetTemp>-30)
		->( ButtonPressed(Up).RegulateTemperature(SetTemp=SetTemp+1,busy=busy+1))+(SetTemp>-29 && SetTemp<0)
		->(ButtonPressed(Down).RegulateTemperature(SetTemp=SetTemp-1,busy=busy+1))))<>RegulateTemperature())
		<>ResetCounter.RegulateTemperature(busy=0);

init allow({TurnMainSystem,ButtonPressed,IndicateCoolingSystem,StatusSystem,
			Error,StartCoolingUnit,StopCoolingUnit,ReceiveMeasuredTemperature,
			SwitchToFunctionalComponent,IndicateBrokenCoolingUnit,IndicateBrokenTemperatureSensor,InCritical,
			StatusCoolingUnits,StatusTemperatureSensors,BrokenCool,NotBrokenCool,BrokenTemp,NotBrokenTemp,
			BusyWithTask,Reset,SoundAlarm,ReceiveSetTemperature,ResetCounter},
	 comm ({SendAlarmStatus|ReceiveAlarmStatus->Error,
			SendSystemStatus|ReceiveSystemStatus1|ReceiveSystemStatus2|ReceiveSystemStatus3->StatusSystem,
			ReceiveReset1|ReceiveReset2|SendReset->Reset}
			,System(Off)||CheckCoolingUnitStatus(false,false,0,0,[],false,false)
			||CheckTemperatureSensorStatus(false,false,false,0,0,[],false,false)||RegulateTemperature(-5,mean(TempSens1,TempSens2,TempSens3),0)));  